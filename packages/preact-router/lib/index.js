import{Component as t,h as o}from"preact";import{routing as n}from"@iosio/routing";export{routing}from"@iosio/routing";import{propsChanged as a}from"@iosio/util";import{lazy as r,Suspense as i}from"preact/compat";const{routerSwitch:e}=n;class p extends t{constructor(t){super(t);let o=window.location.pathname;this.unsub=n.$onChange(()=>{const{pathname:t}=n;o!==t&&(this.setState(Object.create(null)),o=t)}),this.initial=!0}shouldComponentUpdate(t){const{next:n,toLast:r,noChange:i,replacedLast:p}=e({pathMap:t.pathMap,noMatch:t.noMatch,root:t.root});this.next=t=>o(n,t);let{pathMap:s,noMatch:h,root:c}=this.props;return t.root!==c||t.noMatch!==h||a(s||{},t.pathMap||{})||!(r||p||i)}componentDidMount(){this.initial=!1}componentWillUnmount(){this.unsub()}render({pathMap:t,noMatch:n,root:a,...r}){return o(this.initial?e({pathMap:t,noMatch:n,root:a}).next:this.next,r)}}const s=(t,n)=>{const a=r(t),e=n||(()=>o("div"));return function(t){return o(i,{fallback:o(e)},o(a,{...t}))}};export{p as Router,s as lazyLoader};
