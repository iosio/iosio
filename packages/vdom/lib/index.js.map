{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const RECYCLED_NODE = 1,\n    TEXT_NODE = 3,\n    EMPTY_OBJ = {},\n    EMPTY_ARR = [],\n    map = EMPTY_ARR.map,\n    IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|^--/i,\n    isArray = Array.isArray,\n    d = document,\n    eventProxy = function (e) {\n        return this.__ev[e.type](e);\n    },\n    setStyle = (style, key, value) => {\n        if (key[0] === '-') style.setProperty(key, value);\n        else style[key] = typeof value === 'number'\n        && IS_NON_DIMENSIONAL.test(key) === false ? value + 'px' : value == null ? '' : value;\n    },\n    setProperty = (dom, name, value, oldValue, isSvg, _style) => {\n        if (isSvg) {\n            if (name === 'className') name = 'class';\n        } else if (name === 'class') name = 'className';\n        if (name === 'key' || name === 'children') {\n        } else if (name === 'style') {\n            _style = dom.style;\n            if (typeof value === 'string') _style.cssText = value;\n            else {\n                if (typeof oldValue === 'string') (_style.cssText = '', oldValue = null);\n                if (oldValue) for (let i in oldValue) if (!(value && i in value)) setStyle(_style, i, '');\n                if (value) for (let i in value) if (!oldValue || value[i] !== oldValue[i]) setStyle(_style, i, value[i]);\n            }\n        } else if (name[0] === 'o' && name[1] === 'n') {\n            let useCapture = name !== (name = name.replace(/Capture$/, '')),\n                nameLower = name.toLowerCase();\n            name = (nameLower in dom ? nameLower : name).slice(2);\n            if (value) {\n                if (!oldValue) dom.addEventListener(name, eventProxy, useCapture);\n                (dom.__ev || (dom.__ev = {}))[name] = value;\n            } else dom.removeEventListener(name, eventProxy, useCapture);\n        } else if (name === '__html') {\n            if (value || oldValue) {\n                if (!value || !oldValue || value !== oldValue) {\n                    dom.innerHTML = value || '';\n                }\n            }\n        } else if (!(['list', 'tagName', 'form', 'type', 'size'].includes(name)) && !isSvg && name in dom) {\n            dom[name] = value == null ? '' : value;\n        } else if (typeof value !== 'function') {\n            if (name !== (name = name.replace(/^xlink:?/, ''))) {\n                if (value == null || value === false) {\n                    dom.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());\n                } else dom.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);\n            } else if (value == null || (value === false && !/^ar/.test(name))) dom.removeAttribute(name);\n            else dom.setAttribute(name, value);\n        }\n    },\n    diffProps = (dom, newProps, oldProps, isSvg) => {\n        let i;\n        for (i in oldProps) if (!(i in newProps)) if (setProperty(dom, i, null, oldProps[i], isSvg)) return true;\n        for (i in newProps) {\n            if (i !== 'value' && i !== 'checked' && oldProps[i] !== newProps[i]) {\n                if (setProperty(dom, i, newProps[i], oldProps[i], isSvg)) return true\n            }\n        }\n    },\n    createNode = (vnode, isSvg) => {\n        var node = vnode.type === TEXT_NODE\n            ? d.createTextNode(vnode.name)\n            : (isSvg = isSvg || vnode.name === \"svg\")\n                ? d.createElementNS(\"http://www.w3.org/2000/svg\", vnode.name)\n                : d.createElement(vnode.name);\n        diffProps(node, vnode.props, {}, isSvg);\n        for (var i = 0, len = vnode.children.length; i < len; i++) {\n            node.appendChild(createNode(vnode.children[i], isSvg))\n        }\n        return (vnode.node = node)\n    },\n    getKey = (vnode) => vnode == null ? null : vnode.key,\n    patchNode = (parent, node, oldVNode, newVNode, isSvg) => {\n        if (oldVNode === newVNode) {\n        } else if (\n            oldVNode != null &&\n            oldVNode.type === TEXT_NODE &&\n            newVNode.type === TEXT_NODE\n        ) {\n            if (oldVNode.name !== newVNode.name) node.nodeValue = newVNode.name\n        } else if (oldVNode == null || oldVNode.name !== newVNode.name) {\n            node = parent.insertBefore(createNode(newVNode, isSvg), node)\n            if (oldVNode != null) {\n                parent.removeChild(oldVNode.node)\n            }\n        } else {\n            let tmpVKid, oldVKid,\n                oldKey, newKey,\n                oldVProps = oldVNode.props,\n                newVProps = newVNode.props,\n                oldVKids = oldVNode.children,\n                newVKids = newVNode.children,\n                oldHead = 0,\n                newHead = 0,\n                oldTail = oldVKids.length - 1,\n                newTail = newVKids.length - 1;\n\n            isSvg = isSvg || newVNode.name === \"svg\"\n\n            diffProps(node, newVProps, oldVProps, isSvg);\n\n            while (newHead <= newTail && oldHead <= oldTail) {\n                if (\n                    (oldKey = getKey(oldVKids[oldHead])) == null ||\n                    oldKey !== getKey(newVKids[newHead])\n                ) {\n                    break\n                }\n                patchNode(\n                    node,\n                    oldVKids[oldHead].node,\n                    oldVKids[oldHead++],\n                    newVKids[newHead++],\n                    isSvg\n                )\n            }\n\n            while (newHead <= newTail && oldHead <= oldTail) {\n                if (\n                    (oldKey = getKey(oldVKids[oldTail])) == null ||\n                    oldKey !== getKey(newVKids[newTail])\n                ) {\n                    break\n                }\n\n                patchNode(\n                    node,\n                    oldVKids[oldTail].node,\n                    oldVKids[oldTail--],\n                    newVKids[newTail--],\n                    isSvg\n                )\n            }\n\n            if (oldHead > oldTail) {\n                while (newHead <= newTail) {\n                    node.insertBefore(\n                        createNode(newVKids[newHead++], isSvg),\n                        (oldVKid = oldVKids[oldHead]) && oldVKid.node\n                    )\n                }\n            } else if (newHead > newTail) {\n                while (oldHead <= oldTail) {\n                    node.removeChild(oldVKids[oldHead++].node)\n                }\n            } else {\n                for (var i = oldHead, keyed = {}, newKeyed = {}; i <= oldTail; i++) {\n                    if ((oldKey = oldVKids[i].key) != null) {\n                        keyed[oldKey] = oldVKids[i]\n                    }\n                }\n\n                while (newHead <= newTail) {\n                    oldKey = getKey((oldVKid = oldVKids[oldHead]))\n                    newKey = getKey(newVKids[newHead])\n\n                    if (\n                        newKeyed[oldKey] ||\n                        (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))\n                    ) {\n                        if (oldKey == null) {\n                            node.removeChild(oldVKid.node)\n                        }\n                        oldHead++\n                        continue\n                    }\n\n                    if (newKey == null || oldVNode.type === RECYCLED_NODE) {\n                        if (oldKey == null) {\n                            patchNode(\n                                node,\n                                oldVKid && oldVKid.node,\n                                oldVKid,\n                                newVKids[newHead],\n                                isSvg\n                            )\n                            newHead++\n                        }\n                        oldHead++\n                    } else {\n                        if (oldKey === newKey) {\n                            patchNode(node, oldVKid.node, oldVKid, newVKids[newHead], isSvg)\n                            newKeyed[newKey] = true\n                            oldHead++\n                        } else {\n                            if ((tmpVKid = keyed[newKey]) != null) {\n                                patchNode(\n                                    node,\n                                    node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),\n                                    tmpVKid,\n                                    newVKids[newHead],\n                                    isSvg\n                                )\n                                newKeyed[newKey] = true\n                            } else {\n                                patchNode(\n                                    node,\n                                    oldVKid && oldVKid.node,\n                                    null,\n                                    newVKids[newHead],\n                                    isSvg\n                                )\n                            }\n                        }\n                        newHead++\n                    }\n                }\n\n                while (oldHead <= oldTail) {\n                    if (getKey((oldVKid = oldVKids[oldHead++])) == null) {\n                        node.removeChild(oldVKid.node)\n                    }\n                }\n\n                for (var i in keyed) {\n                    if (newKeyed[i] == null) {\n                        node.removeChild(keyed[i].node)\n                    }\n                }\n            }\n        }\n\n        return (newVNode.node = node)\n    };\n\nconst createVNode = (name, props, children, node, key, type) => ({\n    name: name,\n    props: props,\n    children: children,\n    node: node,\n    type: type,\n    key: key,\n});\n\nconst createTextVNode = (value, node) => createVNode(value, EMPTY_OBJ, EMPTY_ARR, node, null, TEXT_NODE);\nconst recycleNode = (node, parent) => {\n    return node.nodeType === TEXT_NODE\n        ? createTextVNode(node.nodeValue, node)\n        : createVNode(\n            node.nodeName.toLowerCase(),\n            EMPTY_OBJ,\n            map.call(node.childNodes, recycleNode),\n            node,\n            null,\n            RECYCLED_NODE\n        )\n};\nconst Fragment = (props) => props.children;\nconst render = (vdom, node) => {\n    let oldVDom = node.vdom || recycleNode(node);\n    vdom = createVNode(\n        oldVDom.name,\n        EMPTY_OBJ,\n        !isArray(vdom) ? [vdom] : vdom,\n        oldVDom.node\n    );\n    return ((node = patchNode(\n        node.parentNode,\n        node,\n        oldVDom,\n        vdom\n    )).vdom = vdom), node\n};\nconst h = function (name, props) {\n    for (var vnode, rest = [], children = [], i = arguments.length; i-- > 2;) rest.push(arguments[i]);\n    if ((props = props == null ? {} : props).children != null) {\n        if (rest.length <= 0) rest.push(props.children);\n        delete props.children;\n    }\n    while (rest.length > 0) {\n        if (isArray((vnode = rest.pop()))) {\n            for (var i = vnode.length; i-- > 0;) rest.push(vnode[i])\n        } else if (vnode === false || vnode === true || vnode == null) {\n        } else children.push(typeof vnode === 'object' ? vnode : createTextVNode(vnode));\n    }\n    return typeof name === 'function'\n        ? (props.children = props.children || children) && name(props)\n        : createVNode(name, props, children, null, props.key)\n};\nexport {h, render, Fragment};"],"names":["EMPTY_OBJ","EMPTY_ARR","map","IS_NON_DIMENSIONAL","isArray","Array","d","document","eventProxy","e","__ev","type","setStyle","style","key","value","setProperty","test","dom","name","oldValue","isSvg","_style","cssText","i","useCapture","replace","nameLower","toLowerCase","slice","addEventListener","removeEventListener","innerHTML","includes","removeAttributeNS","setAttributeNS","removeAttribute","setAttribute","diffProps","newProps","oldProps","createNode","vnode","node","createTextNode","createElementNS","createElement","props","len","children","length","appendChild","getKey","patchNode","parent","oldVNode","newVNode","nodeValue","insertBefore","removeChild","tmpVKid","oldVKid","oldKey","newKey","oldVKids","newVKids","oldHead","newHead","oldTail","newTail","keyed","newKeyed","createVNode","createTextVNode","recycleNode","nodeType","nodeName","call","childNodes","Fragment","render","vdom","oldVDom","parentNode","h","rest","arguments","push","pop"],"mappings":"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"}