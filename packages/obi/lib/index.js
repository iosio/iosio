import{Subie as e,def as t,isFunc as a,isObj as i,extend as n}from"@iosio/util";const r=(u,l)=>{const{sub:b,notify:o}=e();let $=e=>{if(e.$obi)return e;t(e,"$obi",{enumerable:!1,value:!0}),t(e,"$batching",{enumerable:!1,value:{active:!1}}),t(e,"$onChange",{enumerable:!1,value:e=>b(e)}),!l&&t(e,"$uniqueNotifiers",{enumerable:!1,value:!0}),t(e,"$getState",{enumerable:!1,value:()=>Object.keys(e).reduce((t,n)=>a(e[n])?t:(t[n]=i(e[n])&&e[n].$obi?e[n].$getState():e[n],t),{})}),t(e,"$merge",{enumerable:!1,value:(t,i)=>{e.$batching.active=!0,a(t)?t(u):n(u,t),e.$batching.active=!1,!i&&o(u)}});for(let n in e){let b=e[n];a(b)||n.startsWith("$")||(i(b)&&(b=l?$(e[n]):r(e[n])),t(e,n,{enumerable:!0,get:()=>b,set(e){e!==b&&(b=e,u.$batching.active||o(u))}}))}return e};return $(u)};export{r as obi};
