{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import {def, extend, isFunc, isObj, Subie, arrayIncludesItemFromArray} from \"@iosio/util\";\n\n\nexport const select = (obi, selections = []) => ({\n    $onChange: (callback) => {\n        const {sub, notify} = Subie(),\n\n            mainUnsub = obi.$onAnyChange((data, paths = []) =>\n                arrayIncludesItemFromArray(selections, paths) && notify(data, paths)\n            ), unsub = sub(callback);\n\n        return () => (mainUnsub(), unsub());\n    }\n});\n\n\nlet non_enumerables = ['$obi', '$batching', '$onChange', '$getState', '$merge', '$path', '$select'];\n\nexport const obi = suspect => {\n    let {sub: base_sub, notify: base_notify} = Subie();\n    let notifyingPaths = [];\n    const obiOuter = (_suspect, lastPath = '') => {\n        const {sub, notify} = Subie();\n        let makeObi = (obj, _lastPath = '') => {\n            if (obj.$obi) return obj;\n            def(obj, '$obi', {enumerable: false, value: true});\n            def(obj, '$batching', {enumerable: false, value: {active: false}});\n            def(obj, '$onChange', {\n                enumerable: false,\n                value: (callback) => sub(callback)\n            });\n            def(obj, '$onAnyChange', {\n                enumerable: false,\n                value: (callback) => base_sub(callback)\n            });\n            def(obj, '$getState', {\n                enumerable: false,\n                value: () => Object.keys(obj).reduce((acc, curr) =>\n                    !isFunc(obj[curr]) ? (acc[curr] = (isObj(obj[curr]) && obj[curr].$obi)\n                        ? obj[curr].$getState() : obj[curr], acc) : acc, {})\n            });\n            def(obj, '$merge', {\n                enumerable: false,\n                value: (update, ignoreUpdate) => {\n                    suspect.$batching.active = true;\n                    isFunc(update) ? update(_suspect) : extend(_suspect, update);\n                    suspect.$batching.active = false;\n                    if (!ignoreUpdate) {\n                        notify(_suspect, notifyingPaths);\n                        base_notify(suspect, notifyingPaths);\n                    }\n                    notifyingPaths = [];\n                }\n            });\n            def(obj, '$select', {\n                enumerable: false,\n                value: (selections = []) => extend({}, {\n                    ...obj,\n                    ...select(obj, selections)\n                })\n            });\n            for (let key in obj) {\n                let internal = obj[key];\n                if (isFunc(internal) || non_enumerables.includes(key)) continue;\n                let path = _lastPath + (_lastPath ? '.' : '') + key;\n                if (isObj(internal)) obiOuter(obj[key], path);\n                def(obj, key, {\n                    enumerable: true,\n                    get: () => internal,\n                    set(value) {\n                        if (value === internal) return;\n                        if (isObj(value) && isObj(internal) && obj[key].$merge) {\n                            obj[key].$merge(value);\n                        } else {\n                            internal = value;\n                            notifyingPaths.push(path);\n                            if (!suspect.$batching.active) {\n                                notify(_suspect, [path]);\n                                base_notify(suspect, [path]);\n                                notifyingPaths = [];\n                            }\n                        }\n                    },\n                });\n            }\n            return obj\n        };\n        return makeObi(_suspect, lastPath);\n    };\n    return obiOuter(suspect)\n};"],"names":["select","obi","selections","$onChange","callback","sub","notify","Subie","mainUnsub","$onAnyChange","data","paths","arrayIncludesItemFromArray","unsub","non_enumerables","suspect","base_sub","base_notify","notifyingPaths","obiOuter","_suspect","lastPath","obj","_lastPath","$obi","def","enumerable","value","active","Object","keys","reduce","acc","curr","isFunc","isObj","$getState","update","ignoreUpdate","$batching","extend","key","internal","includes","path","get","set","$merge","push"],"mappings":"gHAGaA,MAAAA,EAAS,CAACC,EAAKC,EAAa,OACrCC,UAAYC,IACR,MAAMC,IAACA,EAADC,OAAMA,GAAUC,IAElBC,EAAYP,EAAIQ,aAAa,CAACC,EAAMC,EAAQ,KACxCC,EAA2BV,EAAYS,IAAUL,EAAOI,EAAMC,IAC/DE,EAAQR,EAAID,GAEnB,MAAO,KAAOI,IAAaK,QAKnC,IAAIC,EAAkB,CAAC,OAAQ,YAAa,YAAa,YAAa,SAAU,QAAS,WAE5Eb,MAAAA,EAAMc,IACf,IAAKV,IAAKW,EAAUV,OAAQW,GAAeV,IACvCW,EAAiB,GACrB,MAAMC,EAAW,CAACC,EAAUC,EAAW,MACnC,MAAMhB,IAACA,EAADC,OAAMA,GAAUC,IAiEtB,MAhEc,EAACe,EAAKC,EAAY,MAC5B,GAAID,EAAIE,KAAM,OAAOF,EACrBG,EAAIH,EAAK,OAAQ,CAACI,cAAmBC,WACrCF,EAAIH,EAAK,YAAa,CAACI,cAAmBC,MAAO,CAACC,aAClDH,EAAIH,EAAK,YAAa,CAClBI,cACAC,MAAQvB,GAAaC,EAAID,KAE7BqB,EAAIH,EAAK,eAAgB,CACrBI,cACAC,MAAQvB,GAAaY,EAASZ,KAElCqB,EAAIH,EAAK,YAAa,CAClBI,cACAC,MAAO,IAAME,OAAOC,KAAKR,GAAKS,OAAO,CAACC,EAAKC,IACtCC,EAAOZ,EAAIW,IACoCD,GAD1BA,EAAIC,GAASE,EAAMb,EAAIW,KAAUX,EAAIW,GAAMT,KAC3DF,EAAIW,GAAMG,YAAcd,EAAIW,GAAOD,GAAY,MAE7DP,EAAIH,EAAK,SAAU,CACfI,cACAC,MAAO,CAACU,EAAQC,KACZvB,EAAQwB,UAAUX,UAClBM,EAAOG,GAAUA,EAAOjB,GAAYoB,EAAOpB,EAAUiB,GACrDtB,EAAQwB,UAAUX,UACbU,IACDhC,EAAOc,EAAUF,GACjBD,EAAYF,EAASG,IAEzBA,EAAiB,MAGzBO,EAAIH,EAAK,UAAW,CAChBI,cACAC,MAAO,CAACzB,EAAa,KAAOsC,EAAO,GAAI,IAChClB,KACAtB,EAAOsB,EAAKpB,OAGvB,IAAK,IAAIuC,KAAOnB,EAAK,CACjB,IAAIoB,EAAWpB,EAAImB,GACnB,GAAIP,EAAOQ,IAAa5B,EAAgB6B,SAASF,GAAM,SACvD,IAAIG,EAAOrB,GAAaA,EAAY,IAAM,IAAMkB,EAC5CN,EAAMO,IAAWvB,EAASG,EAAImB,GAAMG,GACxCnB,EAAIH,EAAKmB,EAAK,CACVf,cACAmB,IAAK,IAAMH,EACXI,IAAInB,GACIA,IAAUe,IACVP,EAAMR,IAAUQ,EAAMO,IAAapB,EAAImB,GAAKM,OAC5CzB,EAAImB,GAAKM,OAAOpB,IAEhBe,EAAWf,EACXT,EAAe8B,KAAKJ,GACf7B,EAAQwB,UAAUX,SACnBtB,EAAOc,EAAU,CAACwB,IAClB3B,EAAYF,EAAS,CAAC6B,IACtB1B,EAAiB,SAMrC,OAAOI,GA9DG,CAgECF,EAAUC,IAE7B,OAAOF,EAASJ"}